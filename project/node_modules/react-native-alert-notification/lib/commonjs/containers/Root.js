"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Root = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = _interopRequireWildcard(require("react-native"));

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _Toast = require("./Toast");

var _Dialog = require("./Dialog");

var _service = require("../service");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Root = _ref => {
  var _RN$useColorScheme;

  let {
    theme,
    colors,
    children,
    dialogConfig,
    toastConfig
  } = _ref;
  const colorScheme = (_RN$useColorScheme = _reactNative.default.useColorScheme) === null || _RN$useColorScheme === void 0 ? void 0 : _RN$useColorScheme.call(_reactNative.default);
  const safeAreaInsetsContext = (0, React.useContext)(_reactNativeSafeAreaContext.SafeAreaInsetsContext);
  _service.Color.colorsCustom = colors;
  const isDark = (theme ?? colorScheme) === 'dark';

  if (safeAreaInsetsContext === null) {
    return /*#__PURE__*/React.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, null, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: styles.content
    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_Dialog.Dialog, {
      ref: _Dialog.Dialog.instance,
      isDark: isDark,
      config: dialogConfig
    }), /*#__PURE__*/React.createElement(_Toast.Toast, {
      ref: _Toast.Toast.instance,
      isDark: isDark,
      config: toastConfig
    }), children)));
  }

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.content
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_Dialog.Dialog, {
    ref: _Dialog.Dialog.instance,
    isDark: isDark,
    config: dialogConfig
  }), /*#__PURE__*/React.createElement(_Toast.Toast, {
    ref: _Toast.Toast.instance,
    isDark: isDark,
    config: toastConfig
  }), children));
};

exports.Root = Root;

const styles = _reactNative.StyleSheet.create({
  content: {
    flex: 1
  }
});
//# sourceMappingURL=Root.js.map