{"version":3,"names":["React","AnimatedSectionList","useAfterMountEffect","useChainCallback","useCollapsibleStyle","useConvertAnimatedToValue","useScrollHandlerY","useSharedAnimatedRef","useTabNameContext","useTabsContext","useUpdateScrollViewContentSize","SectionListMemo","memo","forwardRef","props","passRef","SectionListImpl","contentContainerStyle","style","onContentSizeChange","refreshControl","rest","name","setRef","contentInset","ref","scrollHandler","enable","onLayout","_style","_contentContainerStyle","progressViewOffset","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","useMemo","memoRefreshControl","cloneElement","contentInsetValue","memoContentInset","top","memoContentOffset","x","y","memoContentContainerStyle","memoStyle","SectionList"],"sources":["SectionList.tsx"],"sourcesContent":["import React from 'react'\nimport { SectionList as RNSectionList, SectionListProps } from 'react-native'\n\nimport { AnimatedSectionList } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useConvertAnimatedToValue,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Used as a memo to prevent rerendering too often when the context changes.\n * See: https://github.com/facebook/react/issues/15156#issuecomment-474590693\n */\nconst SectionListMemo = React.memo(\n  React.forwardRef<\n    RNSectionList,\n    React.PropsWithChildren<SectionListProps<unknown>>\n  >((props, passRef) => {\n    return (\n      <AnimatedSectionList\n        // @ts-expect-error reanimated types are broken on ref\n        ref={passRef}\n        {...props}\n      />\n    )\n  })\n)\n\nfunction SectionListImpl<R>(\n  {\n    contentContainerStyle,\n    style,\n    onContentSizeChange,\n    refreshControl,\n    ...rest\n  }: Omit<SectionListProps<R>, 'onScroll'>,\n  passRef: React.Ref<RNSectionList>\n): React.ReactElement {\n  const name = useTabNameContext()\n  const { setRef, contentInset } = useTabsContext()\n  const ref = useSharedAnimatedRef<RNSectionList<unknown>>(passRef)\n\n  const { scrollHandler, enable } = useScrollHandlerY(name)\n  const onLayout = useAfterMountEffect(rest.onLayout, () => {\n    'worklet'\n    // we enable the scroll event after mounting\n    // otherwise we get an `onScroll` call with the initial scroll position which can break things\n    enable(true)\n  })\n\n  const {\n    style: _style,\n    contentContainerStyle: _contentContainerStyle,\n    progressViewOffset,\n  } = useCollapsibleStyle()\n\n  React.useEffect(() => {\n    setRef(name, ref)\n  }, [name, ref, setRef])\n\n  const scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name,\n  })\n\n  const scrollContentSizeChangeHandlers = useChainCallback(\n    React.useMemo(() => [scrollContentSizeChange, onContentSizeChange], [\n      onContentSizeChange,\n      scrollContentSizeChange,\n    ])\n  )\n\n  const memoRefreshControl = React.useMemo(\n    () =>\n      refreshControl &&\n      React.cloneElement(refreshControl, {\n        progressViewOffset,\n        ...refreshControl.props,\n      }),\n    [progressViewOffset, refreshControl]\n  )\n\n  const contentInsetValue = useConvertAnimatedToValue(contentInset)\n\n  const memoContentInset = React.useMemo(() => ({ top: contentInsetValue }), [\n    contentInsetValue,\n  ])\n\n  const memoContentOffset = React.useMemo(\n    () => ({ x: 0, y: -contentInsetValue }),\n    [contentInsetValue]\n  )\n\n  const memoContentContainerStyle = React.useMemo(\n    () => [\n      _contentContainerStyle,\n      // TODO: investigate types\n      contentContainerStyle as any,\n    ],\n    [_contentContainerStyle, contentContainerStyle]\n  )\n  const memoStyle = React.useMemo(() => [_style, style], [_style, style])\n\n  return (\n    // @ts-expect-error typescript complains about `unknown` in the memo, it should be T\n    <SectionListMemo\n      {...rest}\n      onLayout={onLayout}\n      ref={ref}\n      bouncesZoom={false}\n      style={memoStyle}\n      contentContainerStyle={memoContentContainerStyle}\n      progressViewOffset={progressViewOffset}\n      onScroll={scrollHandler}\n      onContentSizeChange={scrollContentSizeChangeHandlers}\n      scrollEventThrottle={16}\n      contentInset={memoContentInset}\n      contentOffset={memoContentOffset}\n      automaticallyAdjustContentInsets={false}\n      refreshControl={memoRefreshControl}\n      // workaround for: https://github.com/software-mansion/react-native-reanimated/issues/2735\n      onMomentumScrollEnd={() => {}}\n    />\n  )\n}\n\n/**\n * Use like a regular SectionList.\n */\nexport const SectionList = React.forwardRef(SectionListImpl) as <T>(\n  p: SectionListProps<T> & { ref?: React.Ref<RNSectionList<T>> }\n) => React.ReactElement\n"],"mappings":"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"}