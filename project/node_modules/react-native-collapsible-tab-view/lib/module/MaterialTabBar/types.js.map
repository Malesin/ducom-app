{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import React from 'react'\nimport {\n  LayoutChangeEvent,\n  PressableProps,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native'\nimport Animated from 'react-native-reanimated'\n\nimport { TabBarProps, TabName, TabItemProps } from '../types'\n\ntype AnimatedStyle = StyleProp<Animated.AnimateStyle<ViewStyle>>\ntype AnimatedTextStyle = StyleProp<Animated.AnimateStyle<TextStyle>>\n\nexport type MaterialTabItemProps<T extends TabName> = TabItemProps<T> & {\n  onPress: (name: T) => void\n  onLayout?: (event: LayoutChangeEvent) => void\n  scrollEnabled?: boolean\n\n  style?: StyleProp<ViewStyle>\n  /**\n   * Style to apply to the tab item label\n   */\n  labelStyle?: AnimatedTextStyle\n  inactiveOpacity?: number\n  pressColor?: string\n  pressOpacity?: number\n  /**\n   * Color applied to the label when active\n   */\n  activeColor?: string\n  /**\n   * Color applied to the label when inactive\n   */\n  inactiveColor?: string\n} & Omit<PressableProps, 'onPress' | 'children'>\n\nexport type MaterialTabBarProps<N extends TabName> = TabBarProps<N> & {\n  /**\n   * Indicates whether the tab bar should contain horizontal scroll, when enabled the tab width is dynamic\n   */\n  scrollEnabled?: boolean\n  /**\n   * Style to apply to the active indicator.\n   */\n  indicatorStyle?: AnimatedStyle\n  /**\n   * React component to render as tab bar item\n   */\n  TabItemComponent?: (props: MaterialTabItemProps<N>) => React.ReactElement\n  /**\n   * Function to compute the tab item label text\n   */\n  getLabelText?: (name: N) => string\n  /**\n   * Style to apply to the tab bar container.\n   */\n  style?: StyleProp<ViewStyle>\n  /**\n   * Style to apply to the inner container for tabs\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>\n  /**\n   * Style to apply to the individual tab items in the tab bar.\n   */\n  tabStyle?: StyleProp<ViewStyle>\n  /**\n   * Style to apply to the tab item label\n   */\n  labelStyle?: AnimatedTextStyle\n  /**\n   * Color applied to the label when active\n   */\n  activeColor?: string\n  /**\n   * Color applied to the label when inactive\n   */\n  inactiveColor?: string\n\n  /**\n   * Whether to keep the currently active tab centered in a scrollable tab bar\n   */\n  keepActiveTabCentered?: boolean\n}\n\nexport type ItemLayout = {\n  width: number\n  x: number\n}\n\nexport type IndicatorProps = {\n  indexDecimal: Animated.SharedValue<number>\n  itemsLayout: ItemLayout[]\n  style?: AnimatedStyle\n  fadeIn?: boolean\n}\n"],"mappings":""}