{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import React, { ComponentProps } from 'react'\nimport {\n  FlatList,\n  ScrollView,\n  SectionList,\n  StyleProp,\n  ViewStyle,\n} from 'react-native'\nimport PagerView, { PagerViewProps } from 'react-native-pager-view'\nimport Animated from 'react-native-reanimated'\n\nexport type ContainerRef = PagerView\n\nexport type RefComponent =\n  | FlatList<any>\n  | ScrollView\n  | Animated.ScrollView\n  | SectionList<any>\n\nexport type Ref<T extends RefComponent> = React.RefObject<T>\n\nexport type TabName = string\n\nexport type RefHandler<T extends TabName = TabName> = {\n  jumpToTab: (name: T) => boolean\n  setIndex: (index: number) => boolean\n  getFocusedTab: () => T\n  getCurrentIndex: () => number\n}\n\nexport type CollapsibleRef<T extends TabName = TabName> =\n  | RefHandler<T>\n  | undefined\n\nexport type TabBarProps<T extends TabName = TabName> = {\n  indexDecimal: Animated.SharedValue<number>\n  focusedTab: Animated.SharedValue<T>\n  tabNames: T[]\n  index: Animated.SharedValue<number>\n  containerRef: React.RefObject<ContainerRef>\n  onTabPress: (name: T) => void\n  tabProps: TabsWithProps<T>\n\n  /**\n   * Custom width of the tabbar. Defaults to the window width.\n   */\n  width?: number\n}\n\nexport type IndexChangeEventData<T extends TabName = TabName> = {\n  prevIndex: number\n  index: number\n  prevTabName: T\n  tabName: T\n}\n\nexport type OnTabChangeCallback<T extends TabName = TabName> = (\n  data: IndexChangeEventData<T>\n) => void\n\nexport type TabReactElement<T extends TabName = TabName> = React.ReactElement<\n  TabProps<T>\n> | null\n\nexport type CollapsibleProps = {\n  initialTabName?: TabName\n  /**\n   * Is optional, but will optimize the first render.\n   */\n  headerHeight?: number\n  /**\n   * Is optional, but will optimize the first render.\n   */\n  tabBarHeight?: number\n  /**\n   * Header minimum height when collapsed\n   */\n  minHeaderHeight?: number\n  /**\n   * Reveal header when scrolling down. Implements diffClamp.\n   */\n  revealHeaderOnScroll?: boolean\n  /**\n   * Percentage of header height to define as the snap point. A number between\n   * 0 and 1, or `null` to disable snapping.\n   * @default null\n   */\n  snapThreshold?: number | null\n  children: TabReactElement<TabName>[] | TabReactElement<TabName>\n\n  renderHeader?: (props: TabBarProps<TabName>) => React.ReactElement | null\n\n  renderTabBar?: (props: TabBarProps<TabName>) => React.ReactElement | null\n\n  headerContainerStyle?: StyleProp<Animated.AnimateStyle<ViewStyle>>\n  containerStyle?: StyleProp<ViewStyle>\n  cancelTranslation?: boolean\n  /**\n   * If lazy, will mount the screens only when the tab is visited. There is a\n   * default fade in transition.\n   */\n  lazy?: boolean\n  cancelLazyFadeIn?: boolean\n  /**\n   * Props passed to the pager. If you want for example to\n   * disable swiping, you can pass `{ scrollEnabled: false }`\n   */\n  pagerProps?: Omit<PagerViewProps, 'onPageScroll' | 'initialPage'>\n  /**\n   * Callback fired when the index changes. It receives the current index.\n   */\n  onIndexChange?: (index: number) => void\n\n  /**\n   * Callback fired when the tab changes. It receives the previous and current\n   *  index and tabnames.\n   */\n  onTabChange?: OnTabChangeCallback<TabName>\n\n  /**\n   * Custom width of the container. Defaults to the window width.\n   */\n  width?: number\n\n  /**\n   * Whether the header moves down during overscrolling (for example on pull-to-refresh on iOS) or sticks to the top\n   *\n   * @default false\n   */\n  allowHeaderOverscroll?: boolean\n}\n\nexport type ContextType<T extends TabName = TabName> = {\n  headerHeight: Animated.SharedValue<number | undefined>\n  tabBarHeight: Animated.SharedValue<number | undefined>\n  revealHeaderOnScroll: boolean\n  snapThreshold: number | null | undefined\n  /**\n   * Index value, including decimal points. Use this to interpolate tab\n   * indicators.\n   */\n  indexDecimal: Animated.SharedValue<number>\n  /**\n   * Tab names, same as the keys of `refMap`.\n   */\n  tabNames: Animated.SharedValue<T[]>\n  /**\n   * Current index of the pager.\n   */\n  index: Animated.SharedValue<number>\n  /**\n   * Name of the current focused tab.\n   */\n  focusedTab: Animated.SharedValue<T>\n  /**\n   * DiffClamp value. It's the current visible header height if\n   * `diffClampEnabled={true}`.\n   */\n  accDiffClamp: Animated.SharedValue<number>\n  /**\n   * Scroll position of current tab.\n   */\n  scrollYCurrent: Animated.SharedValue<number>\n  /**\n   * Array of the scroll y position of each tab.\n   */\n  scrollY: Animated.SharedValue<number[]>\n  containerHeight: Animated.SharedValue<number | undefined>\n  /**\n   * Object containing the ref of each scrollable component.\n   */\n  refMap: Record<TabName, Ref<RefComponent>>\n  /**\n   * Set the ref of the scrollable component.\n   */\n  setRef: <TComponent extends RefComponent>(\n    key: T,\n    ref: React.RefObject<TComponent>\n  ) => Ref<TComponent>\n  /**\n   * Max distance allowed to collapse the header.\n   */\n  headerScrollDistance: Animated.SharedValue<number>\n  /**\n   * Previous addScrollY value.\n   */\n  oldAccScrollY: Animated.SharedValue<number>\n  /**\n   * Accumulated scroll Y distance. Used to calculate the accDiffClamp value.\n   */\n  accScrollY: Animated.SharedValue<number>\n  /**\n   * Offset to take the next scrollY as if it were at the same position of the\n   * previous tab.\n   */\n  offset: Animated.SharedValue<number>\n\n  /**\n   * The next snapping value.\n   */\n  snappingTo: Animated.SharedValue<number>\n\n  /**\n   * Height of the scrollable content of each tab. Helps to allow iOS bouncing.\n   */\n  contentHeights: Animated.SharedValue<number[]>\n\n  contentInset: Animated.SharedValue<number>\n\n  headerTranslateY: Animated.SharedValue<number>\n\n  width: number\n\n  /**\n   * Whether the header moves down during overscrolling (for example on pull-to-refresh on iOS) or sticks to the top\n   *\n   * @default false\n   */\n  allowHeaderOverscroll?: boolean\n\n  minHeaderHeight: number\n}\n\nexport type ScrollViewProps = ComponentProps<typeof Animated.ScrollView>\n\nexport type CollapsibleStyle = {\n  style: { width: number }\n  contentContainerStyle: {\n    minHeight: number\n    paddingTop: number\n  }\n  progressViewOffset: number\n}\n\nexport type TabsWithProps<T extends TabName = TabName> = Map<\n  T,\n  Omit<TabProps<T>, 'children'> & { index: number }\n>\n\nexport type TabItemProps<T extends TabName> = {\n  name: T\n  index: number\n  indexDecimal: Animated.SharedValue<number>\n\n  label: string | ((props: TabItemProps<T>) => React.ReactNode)\n}\n\nexport type TabProps<T extends TabName> = {\n  readonly name: T\n  label?: TabItemProps<T>['label']\n  children: React.ReactNode\n}\n"],"mappings":""}