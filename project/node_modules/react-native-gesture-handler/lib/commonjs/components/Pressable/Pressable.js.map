{"version":3,"sources":["Pressable.tsx"],"names":["DEFAULT_LONG_PRESS_DURATION","Pressable","props","pressedState","setPressedState","testOnly_pressed","pressableRef","isPressCallbackEnabled","hasPassedBoundsChecks","shouldPreventNativeEffects","normalizedHitSlop","hitSlop","normalizedPressRetentionOffset","pressRetentionOffset","hoverInTimeout","hoverOutTimeout","hoverGesture","Gesture","Hover","manualActivation","cancelsTouchesInView","onBegin","event","current","clearTimeout","delayHoverIn","setTimeout","onHoverIn","onFinalize","delayHoverOut","onHoverOut","pressDelayTimeoutRef","isTouchPropagationAllowed","deferredEventPayload","pressInHandler","handlingOnTouchesDown","onPressIn","pressOutHandler","nativeEvent","touches","length","changedTouches","unstable_pressDelay","onPressOut","onPress","longPressTimeoutRef","onEndHandlingTouchesDown","cancelledMidPress","activateLongPress","onLongPress","longPressMinDuration","delayLongPress","pressAndTouchGesture","LongPress","minDuration","Number","MAX_SAFE_INTEGER","maxDistance","onTouchesDown","measure","_x","_y","width","height","at","onTouchesUp","onTouchesCancelled","allTouches","buttonGesture","Native","Platform","OS","onStart","appliedHitSlop","isPressableEnabled","disabled","gestures","gesture","enabled","runOnJS","shouldCancelWhenOutside","Simultaneous","defaultRippleColor","android_ripple","undefined","pointerStyle","cursor","styleProp","style","pressed","childrenProp","children","flattenedStyles","StyleSheet","flatten","innerStyles","outerStyles","testID","android_disableSound","color","radius","absoluteFill","__DEV__"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { GestureObjects as Gesture } from '../../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../../handlers/gestures/GestureDetector';\nimport { PressableEvent, PressableProps } from './PressableProps';\nimport {\n  Insets,\n  Platform,\n  StyleProp,\n  View,\n  ViewStyle,\n  processColor,\n  StyleSheet,\n} from 'react-native';\nimport NativeButton from '../GestureHandlerButton';\nimport {\n  numberAsInset,\n  gestureToPressableEvent,\n  isTouchWithinInset,\n  gestureTouchToPressableEvent,\n  addInsets,\n  splitStyles,\n} from './utils';\nimport { PressabilityDebugView } from '../../handlers/PressabilityDebugView';\nimport { GestureTouchEvent } from '../../handlers/gestureHandlerCommon';\n\nconst DEFAULT_LONG_PRESS_DURATION = 500;\n\nexport default function Pressable(props: PressableProps) {\n  const [pressedState, setPressedState] = useState(\n    props.testOnly_pressed ?? false\n  );\n\n  const pressableRef = useRef<View>(null);\n\n  // Disabled when onLongPress has been called\n  const isPressCallbackEnabled = useRef<boolean>(true);\n  const hasPassedBoundsChecks = useRef<boolean>(false);\n  const shouldPreventNativeEffects = useRef<boolean>(false);\n\n  const normalizedHitSlop: Insets = useMemo(\n    () =>\n      typeof props.hitSlop === 'number'\n        ? numberAsInset(props.hitSlop)\n        : props.hitSlop ?? {},\n    [props.hitSlop]\n  );\n\n  const normalizedPressRetentionOffset: Insets = useMemo(\n    () =>\n      typeof props.pressRetentionOffset === 'number'\n        ? numberAsInset(props.pressRetentionOffset)\n        : props.pressRetentionOffset ?? {},\n    [props.pressRetentionOffset]\n  );\n\n  const hoverInTimeout = useRef<number | null>(null);\n  const hoverOutTimeout = useRef<number | null>(null);\n\n  const hoverGesture = useMemo(\n    () =>\n      Gesture.Hover()\n        .manualActivation(true) // Stops Hover from blocking Native gesture activation on web\n        .cancelsTouchesInView(false)\n        .onBegin((event) => {\n          if (hoverOutTimeout.current) {\n            clearTimeout(hoverOutTimeout.current);\n          }\n          if (props.delayHoverIn) {\n            hoverInTimeout.current = setTimeout(\n              () => props.onHoverIn?.(gestureToPressableEvent(event)),\n              props.delayHoverIn\n            );\n            return;\n          }\n          props.onHoverIn?.(gestureToPressableEvent(event));\n        })\n        .onFinalize((event) => {\n          if (hoverInTimeout.current) {\n            clearTimeout(hoverInTimeout.current);\n          }\n          if (props.delayHoverOut) {\n            hoverOutTimeout.current = setTimeout(\n              () => props.onHoverOut?.(gestureToPressableEvent(event)),\n              props.delayHoverOut\n            );\n            return;\n          }\n          props.onHoverOut?.(gestureToPressableEvent(event));\n        }),\n    [props]\n  );\n\n  const pressDelayTimeoutRef = useRef<number | null>(null);\n  const isTouchPropagationAllowed = useRef<boolean>(false);\n\n  // iOS only: due to varying flow of gestures, events sometimes have to be saved for later use\n  const deferredEventPayload = useRef<PressableEvent | null>(null);\n\n  const pressInHandler = useCallback(\n    (event: PressableEvent) => {\n      if (handlingOnTouchesDown.current) {\n        deferredEventPayload.current = event;\n      }\n\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      deferredEventPayload.current = null;\n\n      props.onPressIn?.(event);\n      isPressCallbackEnabled.current = true;\n      pressDelayTimeoutRef.current = null;\n      setPressedState(true);\n    },\n    [props]\n  );\n\n  const pressOutHandler = useCallback(\n    (event: PressableEvent) => {\n      if (\n        !hasPassedBoundsChecks.current ||\n        event.nativeEvent.touches.length >\n          event.nativeEvent.changedTouches.length\n      ) {\n        return;\n      }\n\n      if (props.unstable_pressDelay && pressDelayTimeoutRef.current !== null) {\n        // When delay is preemptively finished by lifting touches,\n        // we want to immediately activate it's effects - pressInHandler,\n        // even though we are located at the pressOutHandler\n        clearTimeout(pressDelayTimeoutRef.current);\n        pressInHandler(event);\n      }\n\n      if (deferredEventPayload.current) {\n        props.onPressIn?.(deferredEventPayload.current);\n        deferredEventPayload.current = null;\n      }\n\n      props.onPressOut?.(event);\n\n      if (isPressCallbackEnabled.current) {\n        props.onPress?.(event);\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n\n      isTouchPropagationAllowed.current = false;\n      hasPassedBoundsChecks.current = false;\n      isPressCallbackEnabled.current = true;\n      setPressedState(false);\n    },\n    [pressInHandler, props]\n  );\n\n  const handlingOnTouchesDown = useRef<boolean>(false);\n  const onEndHandlingTouchesDown = useRef<(() => void) | null>(null);\n  const cancelledMidPress = useRef<boolean>(false);\n\n  const activateLongPress = useCallback(\n    (event: GestureTouchEvent) => {\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      if (hasPassedBoundsChecks.current) {\n        props.onLongPress?.(gestureTouchToPressableEvent(event));\n        isPressCallbackEnabled.current = false;\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n    },\n    [props]\n  );\n\n  const longPressTimeoutRef = useRef<number | null>(null);\n  const longPressMinDuration =\n    (props.delayLongPress ?? DEFAULT_LONG_PRESS_DURATION) +\n    (props.unstable_pressDelay ?? 0);\n\n  const pressAndTouchGesture = useMemo(\n    () =>\n      Gesture.LongPress()\n        .minDuration(Number.MAX_SAFE_INTEGER) // Stops long press from blocking native gesture\n        .maxDistance(Number.MAX_SAFE_INTEGER) // Stops long press from cancelling after set distance\n        .cancelsTouchesInView(false)\n        .onTouchesDown((event) => {\n          handlingOnTouchesDown.current = true;\n          pressableRef.current?.measure((_x, _y, width, height) => {\n            if (\n              !isTouchWithinInset(\n                {\n                  width,\n                  height,\n                },\n                normalizedHitSlop,\n                event.changedTouches.at(-1)\n              ) ||\n              hasPassedBoundsChecks.current ||\n              cancelledMidPress.current\n            ) {\n              cancelledMidPress.current = false;\n              onEndHandlingTouchesDown.current = null;\n              handlingOnTouchesDown.current = false;\n              return;\n            }\n\n            hasPassedBoundsChecks.current = true;\n\n            // In case of multiple touches, the first one starts long press gesture\n            if (longPressTimeoutRef.current === null) {\n              // Start long press gesture timer\n              longPressTimeoutRef.current = setTimeout(\n                () => activateLongPress(event),\n                longPressMinDuration\n              );\n            }\n\n            if (props.unstable_pressDelay) {\n              pressDelayTimeoutRef.current = setTimeout(() => {\n                pressInHandler(gestureTouchToPressableEvent(event));\n              }, props.unstable_pressDelay);\n            } else {\n              pressInHandler(gestureTouchToPressableEvent(event));\n            }\n\n            onEndHandlingTouchesDown.current?.();\n            onEndHandlingTouchesDown.current = null;\n            handlingOnTouchesDown.current = false;\n          });\n        })\n        .onTouchesUp((event) => {\n          if (handlingOnTouchesDown.current) {\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n          // On iOS, short taps will make LongPress gesture call onTouchesUp before Native gesture calls onStart\n          // This variable ensures that onStart isn't detected as the first gesture since Pressable is pressed.\n          if (deferredEventPayload.current !== null) {\n            shouldPreventNativeEffects.current = true;\n          }\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        })\n        .onTouchesCancelled((event) => {\n          isPressCallbackEnabled.current = false;\n\n          if (handlingOnTouchesDown.current) {\n            cancelledMidPress.current = true;\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n\n          if (\n            !hasPassedBoundsChecks.current ||\n            event.allTouches.length > event.changedTouches.length\n          ) {\n            return;\n          }\n\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        }),\n    [\n      activateLongPress,\n      longPressMinDuration,\n      normalizedHitSlop,\n      pressInHandler,\n      pressOutHandler,\n      props.unstable_pressDelay,\n    ]\n  );\n\n  // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events\n  const buttonGesture = useMemo(\n    () =>\n      Gesture.Native()\n        .onBegin(() => {\n          // Android sets BEGAN state on press down\n          if (Platform.OS === 'android') {\n            isTouchPropagationAllowed.current = true;\n          }\n        })\n        .onStart(() => {\n          if (Platform.OS === 'web') {\n            isTouchPropagationAllowed.current = true;\n          }\n\n          // iOS sets ACTIVE state on press down\n          if (Platform.OS !== 'ios') {\n            return;\n          }\n\n          if (deferredEventPayload.current) {\n            isTouchPropagationAllowed.current = true;\n\n            if (hasPassedBoundsChecks.current) {\n              pressInHandler(deferredEventPayload.current);\n              deferredEventPayload.current = null;\n            } else {\n              pressOutHandler(deferredEventPayload.current);\n              isTouchPropagationAllowed.current = false;\n            }\n\n            return;\n          }\n\n          if (hasPassedBoundsChecks.current) {\n            isTouchPropagationAllowed.current = true;\n            return;\n          }\n\n          if (shouldPreventNativeEffects.current) {\n            shouldPreventNativeEffects.current = false;\n            return;\n          }\n\n          isTouchPropagationAllowed.current = true;\n        }),\n    [pressInHandler, pressOutHandler]\n  );\n\n  const appliedHitSlop = addInsets(\n    normalizedHitSlop,\n    normalizedPressRetentionOffset\n  );\n\n  const isPressableEnabled = props.disabled !== true;\n\n  const gestures = [pressAndTouchGesture, hoverGesture, buttonGesture];\n\n  for (const gesture of gestures) {\n    gesture.enabled(isPressableEnabled);\n    gesture.runOnJS(true);\n    gesture.hitSlop(appliedHitSlop);\n    gesture.shouldCancelWhenOutside(false);\n\n    if (Platform.OS !== 'web') {\n      gesture.shouldCancelWhenOutside(true);\n    }\n  }\n\n  // Uses different hitSlop, to activate on hitSlop area instead of pressRetentionOffset area\n  buttonGesture.hitSlop(normalizedHitSlop);\n\n  const gesture = Gesture.Simultaneous(...gestures);\n\n  const defaultRippleColor = props.android_ripple ? undefined : 'transparent';\n\n  // `cursor: 'pointer'` on `RNButton` crashes iOS\n  const pointerStyle: StyleProp<ViewStyle> =\n    Platform.OS === 'web' ? { cursor: 'pointer' } : {};\n\n  const styleProp =\n    typeof props.style === 'function'\n      ? props.style({ pressed: pressedState })\n      : props.style;\n\n  const childrenProp =\n    typeof props.children === 'function'\n      ? props.children({ pressed: pressedState })\n      : props.children;\n\n  const flattenedStyles = StyleSheet.flatten(styleProp ?? {});\n\n  const [innerStyles, outerStyles] = splitStyles(flattenedStyles);\n\n  return (\n    <View style={outerStyles}>\n      <GestureDetector gesture={gesture}>\n        <NativeButton\n          ref={pressableRef}\n          testID={props.testID}\n          hitSlop={appliedHitSlop}\n          enabled={isPressableEnabled}\n          touchSoundDisabled={props.android_disableSound ?? undefined}\n          rippleColor={processColor(\n            props.android_ripple?.color ?? defaultRippleColor\n          )}\n          rippleRadius={props.android_ripple?.radius ?? undefined}\n          style={[StyleSheet.absoluteFill, pointerStyle, innerStyles]}>\n          {childrenProp}\n          {__DEV__ ? (\n            <PressabilityDebugView color=\"red\" hitSlop={normalizedHitSlop} />\n          ) : null}\n        </NativeButton>\n      </GestureDetector>\n    </View>\n  );\n}\n"]}