{"version":3,"sources":["ReanimatedSwipeable.tsx"],"names":["React","forwardRef","useCallback","useImperativeHandle","useRef","GestureObjects","Gesture","GestureDetector","Animated","Extrapolation","interpolate","runOnJS","useAnimatedStyle","useSharedValue","withSpring","I18nManager","StyleSheet","View","DRAG_TOSS","Swipeable","props","ref","rowState","userDrag","appliedTranslation","rowWidth","leftWidth","rightWidth","rightOffset","leftActionTranslate","rightActionTranslate","showLeftProgress","showRightProgress","swipeableMethods","close","openLeft","openRight","reset","defaultProps","friction","overshootFriction","overshootLeftProp","overshootLeft","overshootRightProp","overshootRight","calculateCurrentOffset","value","updateAnimatedEvent","Math","max","startOffset","offsetDrag","Number","MIN_VALUE","CLAMP","dispatchImmediateEvents","fromValue","toValue","onSwipeableWillOpen","onSwipeableWillClose","closingDirection","dispatchEndEvents","onSwipeableOpen","current","onSwipeableClose","animationOptionsProp","animationOptions","animateRow","velocityX","sign","springConfig","duration","dampingRatio","stiffness","velocity","overshootClamping","isFinished","progressTarget","onRowLayout","nativeEvent","layout","width","children","renderLeftActions","renderRightActions","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","leftAnimatedStyle","transform","translateX","leftElement","styles","leftActions","x","rightAnimatedStyle","rightElement","rightActions","leftThresholdProp","leftThreshold","rightThresholdProp","rightThreshold","handleRelease","event","translationX","startOffsetX","tapGesture","Tap","onStart","onSwipeableOpenStartDrag","onSwipeableCloseStartDrag","panGesture","Pan","onUpdate","direction","onEnd","enableTrackpadTwoFingerGesture","activeOffsetX","shouldCancelWhenOutside","enabled","animatedStyle","pointerEvents","containerStyle","childrenContainerStyle","container","create","overflow","absoluteFillObject","flexDirection","isRTL"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\nimport {\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../handlers/gestureHandlerCommon';\nimport type { PanGestureHandlerProps } from '../handlers/PanGestureHandler';\nimport type { PanGestureHandlerEventPayload } from '../handlers/GestureHandlerEventPayload';\nimport Animated, {\n  Extrapolation,\n  SharedValue,\n  interpolate,\n  runOnJS,\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\nimport {\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (\n    direction: 'left' | 'right',\n    swipeable: SwipeableMethods\n  ) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: SwipeableMethods\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: SharedValue<number>,\n    dragAnimatedValue: SharedValue<number>,\n    swipeable: SwipeableMethods\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: SharedValue<number>,\n    dragAnimatedValue: SharedValue<number>,\n    swipeable: SwipeableMethods\n  ) => React.ReactNode;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\nexport interface SwipeableMethods {\n  close: () => void;\n  openLeft: () => void;\n  openRight: () => void;\n  reset: () => void;\n}\n\nconst Swipeable = forwardRef<SwipeableMethods, SwipeableProps>(\n  function Swipeable(\n    props: SwipeableProps,\n    ref: ForwardedRef<SwipeableMethods>\n  ) {\n    const rowState = useSharedValue<number>(0);\n\n    const userDrag = useSharedValue<number>(0);\n    const appliedTranslation = useSharedValue<number>(0);\n\n    const rowWidth = useSharedValue<number>(0);\n    const leftWidth = useSharedValue<number>(0);\n    const rightWidth = useSharedValue<number>(0);\n    const rightOffset = useSharedValue<number>(0);\n\n    const leftActionTranslate = useSharedValue<number>(0);\n    const rightActionTranslate = useSharedValue<number>(0);\n\n    const showLeftProgress = useSharedValue<number>(0);\n    const showRightProgress = useSharedValue<number>(0);\n\n    const swipeableMethods = useRef<SwipeableMethods>({\n      close: () => {\n        'worklet';\n      },\n      openLeft: () => {\n        'worklet';\n      },\n      openRight: () => {\n        'worklet';\n      },\n      reset: () => {\n        'worklet';\n      },\n    });\n\n    const defaultProps = {\n      friction: 1,\n      overshootFriction: 1,\n    };\n\n    const {\n      friction = defaultProps.friction,\n      overshootFriction = defaultProps.overshootFriction,\n    } = props;\n\n    const overshootLeftProp = props.overshootLeft;\n    const overshootRightProp = props.overshootRight;\n\n    const calculateCurrentOffset = useCallback(() => {\n      'worklet';\n      if (rowState.value === 1) {\n        return leftWidth.value;\n      } else if (rowState.value === -1) {\n        return -rowWidth.value - rightOffset.value;\n      }\n      return 0;\n    }, [leftWidth, rightOffset, rowState, rowWidth]);\n\n    const updateAnimatedEvent = () => {\n      'worklet';\n      rightWidth.value = Math.max(0, rowWidth.value - rightOffset.value);\n\n      const overshootLeft = overshootLeftProp ?? leftWidth.value > 0;\n      const overshootRight = overshootRightProp ?? rightWidth.value > 0;\n\n      const startOffset =\n        rowState.value === 1\n          ? leftWidth.value\n          : rowState.value === -1\n          ? -rightWidth.value\n          : 0;\n\n      const offsetDrag = userDrag.value / friction + startOffset;\n\n      appliedTranslation.value = interpolate(\n        offsetDrag,\n        [\n          -rightWidth.value - 1,\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + 1,\n        ],\n        [\n          -rightWidth.value - (overshootRight ? 1 / overshootFriction : 0),\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + (overshootLeft ? 1 / overshootFriction : 0),\n        ]\n      );\n\n      showLeftProgress.value =\n        leftWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-1, 0, leftWidth.value],\n              [0, 0, 1]\n            )\n          : 0;\n      leftActionTranslate.value = interpolate(\n        showLeftProgress.value,\n        [0, Number.MIN_VALUE],\n        [-10000, 0],\n        Extrapolation.CLAMP\n      );\n      showRightProgress.value =\n        rightWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-rightWidth.value, 0, 1],\n              [1, 0, 0]\n            )\n          : 0;\n      rightActionTranslate.value = interpolate(\n        showRightProgress.value,\n        [0, Number.MIN_VALUE],\n        [-10000, 0],\n        Extrapolation.CLAMP\n      );\n    };\n\n    const dispatchImmediateEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        if (toValue > 0 && props.onSwipeableWillOpen) {\n          props.onSwipeableWillOpen('left');\n        } else if (toValue < 0 && props.onSwipeableWillOpen) {\n          props.onSwipeableWillOpen('right');\n        } else if (props.onSwipeableWillClose) {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          props.onSwipeableWillClose(closingDirection);\n        }\n      },\n      [\n        props,\n        props.onSwipeableWillClose,\n        props.onSwipeableWillOpen,\n        swipeableMethods,\n      ]\n    );\n\n    const dispatchEndEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        if (toValue > 0 && props.onSwipeableOpen) {\n          props.onSwipeableOpen('left', swipeableMethods.current);\n        } else if (toValue < 0 && props.onSwipeableOpen) {\n          props.onSwipeableOpen('right', swipeableMethods.current);\n        } else if (props.onSwipeableClose) {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          props.onSwipeableClose(closingDirection, swipeableMethods.current);\n        }\n      },\n      [props, props.onSwipeableClose, props.onSwipeableOpen, swipeableMethods]\n    );\n\n    const animationOptionsProp = props.animationOptions;\n\n    const animateRow = useCallback(\n      (fromValue: number, toValue: number, velocityX?: number) => {\n        'worklet';\n        rowState.value = Math.sign(toValue);\n\n        const springConfig = {\n          duration: 1000,\n          dampingRatio: 0.9,\n          stiffness: 500,\n          velocity: velocityX,\n          overshootClamping: true,\n          ...animationOptionsProp,\n        };\n\n        appliedTranslation.value = withSpring(\n          toValue,\n          springConfig,\n          (isFinished) => {\n            if (isFinished) {\n              runOnJS(dispatchEndEvents)(fromValue, toValue);\n            }\n          }\n        );\n\n        const progressTarget = toValue === 0 ? 0 : 1;\n\n        // Velocity is in px, while progress is in %\n        springConfig.velocity = 0;\n\n        showLeftProgress.value =\n          leftWidth.value > 0 ? withSpring(progressTarget, springConfig) : 0;\n        showRightProgress.value =\n          rightWidth.value > 0 ? withSpring(progressTarget, springConfig) : 0;\n\n        runOnJS(dispatchImmediateEvents)(fromValue, toValue);\n      },\n      [\n        showLeftProgress,\n        appliedTranslation,\n        dispatchEndEvents,\n        dispatchImmediateEvents,\n        animationOptionsProp,\n        rowState,\n      ]\n    );\n\n    const onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n      rowWidth.value = nativeEvent.layout.width;\n    };\n\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = props;\n\n    swipeableMethods.current = {\n      close() {\n        'worklet';\n        animateRow(calculateCurrentOffset(), 0);\n      },\n      openLeft() {\n        'worklet';\n        animateRow(calculateCurrentOffset(), leftWidth.value);\n      },\n      openRight() {\n        'worklet';\n        rightWidth.value = rowWidth.value - rightOffset.value;\n        animateRow(calculateCurrentOffset(), -rightWidth.value);\n      },\n      reset() {\n        'worklet';\n        userDrag.value = 0;\n        showLeftProgress.value = 0;\n        appliedTranslation.value = 0;\n        rowState.value = 0;\n      },\n    };\n\n    const leftAnimatedStyle = useAnimatedStyle(\n      () => ({\n        transform: [\n          {\n            translateX: leftActionTranslate.value,\n          },\n        ],\n      }),\n      [leftActionTranslate]\n    );\n\n    const leftElement = renderLeftActions && (\n      <Animated.View style={[styles.leftActions, leftAnimatedStyle]}>\n        {renderLeftActions(\n          showLeftProgress,\n          appliedTranslation,\n          swipeableMethods.current\n        )}\n        <View\n          onLayout={({ nativeEvent }) =>\n            (leftWidth.value = nativeEvent.layout.x)\n          }\n        />\n      </Animated.View>\n    );\n\n    const rightAnimatedStyle = useAnimatedStyle(\n      () => ({\n        transform: [\n          {\n            translateX: rightActionTranslate.value,\n          },\n        ],\n      }),\n      [rightActionTranslate]\n    );\n\n    const rightElement = renderRightActions && (\n      <Animated.View style={[styles.rightActions, rightAnimatedStyle]}>\n        {renderRightActions(\n          showRightProgress,\n          appliedTranslation,\n          swipeableMethods.current\n        )}\n        <View\n          onLayout={({ nativeEvent }) =>\n            (rightOffset.value = nativeEvent.layout.x)\n          }\n        />\n      </Animated.View>\n    );\n\n    const leftThresholdProp = props.leftThreshold;\n    const rightThresholdProp = props.rightThreshold;\n\n    const handleRelease = (\n      event: GestureStateChangeEvent<PanGestureHandlerEventPayload>\n    ) => {\n      'worklet';\n      const { velocityX } = event;\n      userDrag.value = event.translationX;\n\n      rightWidth.value = rowWidth.value - rightOffset.value;\n\n      const leftThreshold = leftThresholdProp ?? leftWidth.value / 2;\n      const rightThreshold = rightThresholdProp ?? rightWidth.value / 2;\n\n      const startOffsetX = calculateCurrentOffset() + userDrag.value / friction;\n      const translationX = (userDrag.value + DRAG_TOSS * velocityX) / friction;\n\n      let toValue = 0;\n\n      if (rowState.value === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth.value;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth.value;\n        }\n      } else if (rowState.value === 1) {\n        // Swiped to left\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth.value;\n        }\n      } else {\n        // Swiped to right\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth.value;\n        }\n      }\n\n      animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    const close = () => {\n      'worklet';\n      animateRow(calculateCurrentOffset(), 0);\n    };\n\n    const tapGesture = Gesture.Tap().onStart(() => {\n      if (rowState.value !== 0) {\n        close();\n      }\n    });\n\n    const onSwipeableOpenStartDrag = props.onSwipeableOpenStartDrag;\n    const onSwipeableCloseStartDrag = props.onSwipeableCloseStartDrag;\n\n    const panGesture = Gesture.Pan()\n      .onUpdate((event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => {\n        userDrag.value = event.translationX;\n\n        const direction =\n          rowState.value === -1\n            ? 'right'\n            : rowState.value === 1\n            ? 'left'\n            : event.translationX > 0\n            ? 'left'\n            : 'right';\n\n        if (rowState.value === 0 && onSwipeableOpenStartDrag) {\n          runOnJS(onSwipeableOpenStartDrag)(direction);\n        } else if (rowState.value !== 0 && onSwipeableCloseStartDrag) {\n          runOnJS(onSwipeableCloseStartDrag)(direction);\n        }\n        updateAnimatedEvent();\n      })\n      .onEnd(\n        (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n          handleRelease(event);\n        }\n      );\n\n    if (props.enableTrackpadTwoFingerGesture) {\n      panGesture.enableTrackpadTwoFingerGesture(\n        props.enableTrackpadTwoFingerGesture\n      );\n    }\n\n    panGesture.activeOffsetX([\n      -dragOffsetFromRightEdge,\n      dragOffsetFromLeftEdge,\n    ]);\n    tapGesture.shouldCancelWhenOutside(true);\n\n    useImperativeHandle(ref, () => swipeableMethods.current, [\n      swipeableMethods,\n    ]);\n\n    panGesture.enabled(props.enabled !== false);\n\n    const animatedStyle = useAnimatedStyle(\n      () => ({\n        transform: [{ translateX: appliedTranslation.value }],\n        pointerEvents: rowState.value === 0 ? 'auto' : 'box-only',\n      }),\n      [appliedTranslation, rowState]\n    );\n\n    const containerStyle = props.containerStyle;\n    const childrenContainerStyle = props.childrenContainerStyle;\n\n    return (\n      <GestureDetector gesture={panGesture} touchAction=\"pan-y\">\n        <Animated.View\n          onLayout={onRowLayout}\n          style={[styles.container, containerStyle]}>\n          {leftElement}\n          {rightElement}\n          <GestureDetector gesture={tapGesture} touchAction=\"pan-y\">\n            <Animated.View style={[animatedStyle, childrenContainerStyle]}>\n              {children}\n            </Animated.View>\n          </GestureDetector>\n        </Animated.View>\n      </GestureDetector>\n    );\n  }\n);\n\nexport default Swipeable;\nexport type SwipeableRef = ForwardedRef<SwipeableMethods>;\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]}