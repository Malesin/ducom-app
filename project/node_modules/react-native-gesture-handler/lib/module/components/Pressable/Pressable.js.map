{"version":3,"sources":["Pressable.tsx"],"names":["React","useCallback","useMemo","useRef","useState","GestureObjects","Gesture","GestureDetector","Platform","View","processColor","StyleSheet","NativeButton","numberAsInset","gestureToPressableEvent","isTouchWithinInset","gestureTouchToPressableEvent","addInsets","splitStyles","PressabilityDebugView","DEFAULT_LONG_PRESS_DURATION","Pressable","props","pressedState","setPressedState","testOnly_pressed","pressableRef","isPressCallbackEnabled","hasPassedBoundsChecks","shouldPreventNativeEffects","normalizedHitSlop","hitSlop","normalizedPressRetentionOffset","pressRetentionOffset","hoverInTimeout","hoverOutTimeout","hoverGesture","Hover","manualActivation","cancelsTouchesInView","onBegin","event","current","clearTimeout","delayHoverIn","setTimeout","onHoverIn","onFinalize","delayHoverOut","onHoverOut","pressDelayTimeoutRef","isTouchPropagationAllowed","deferredEventPayload","pressInHandler","handlingOnTouchesDown","onPressIn","pressOutHandler","nativeEvent","touches","length","changedTouches","unstable_pressDelay","onPressOut","onPress","longPressTimeoutRef","onEndHandlingTouchesDown","cancelledMidPress","activateLongPress","onLongPress","longPressMinDuration","delayLongPress","pressAndTouchGesture","LongPress","minDuration","Number","MAX_SAFE_INTEGER","maxDistance","onTouchesDown","measure","_x","_y","width","height","at","onTouchesUp","onTouchesCancelled","allTouches","buttonGesture","Native","OS","onStart","appliedHitSlop","isPressableEnabled","disabled","gestures","gesture","enabled","runOnJS","shouldCancelWhenOutside","Simultaneous","defaultRippleColor","android_ripple","undefined","pointerStyle","cursor","styleProp","style","pressed","childrenProp","children","flattenedStyles","flatten","innerStyles","outerStyles","testID","android_disableSound","color","radius","absoluteFill","__DEV__"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { GestureObjects as Gesture } from '../../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../../handlers/gestures/GestureDetector';\nimport { PressableEvent, PressableProps } from './PressableProps';\nimport {\n  Insets,\n  Platform,\n  StyleProp,\n  View,\n  ViewStyle,\n  processColor,\n  StyleSheet,\n} from 'react-native';\nimport NativeButton from '../GestureHandlerButton';\nimport {\n  numberAsInset,\n  gestureToPressableEvent,\n  isTouchWithinInset,\n  gestureTouchToPressableEvent,\n  addInsets,\n  splitStyles,\n} from './utils';\nimport { PressabilityDebugView } from '../../handlers/PressabilityDebugView';\nimport { GestureTouchEvent } from '../../handlers/gestureHandlerCommon';\n\nconst DEFAULT_LONG_PRESS_DURATION = 500;\n\nexport default function Pressable(props: PressableProps) {\n  const [pressedState, setPressedState] = useState(\n    props.testOnly_pressed ?? false\n  );\n\n  const pressableRef = useRef<View>(null);\n\n  // Disabled when onLongPress has been called\n  const isPressCallbackEnabled = useRef<boolean>(true);\n  const hasPassedBoundsChecks = useRef<boolean>(false);\n  const shouldPreventNativeEffects = useRef<boolean>(false);\n\n  const normalizedHitSlop: Insets = useMemo(\n    () =>\n      typeof props.hitSlop === 'number'\n        ? numberAsInset(props.hitSlop)\n        : props.hitSlop ?? {},\n    [props.hitSlop]\n  );\n\n  const normalizedPressRetentionOffset: Insets = useMemo(\n    () =>\n      typeof props.pressRetentionOffset === 'number'\n        ? numberAsInset(props.pressRetentionOffset)\n        : props.pressRetentionOffset ?? {},\n    [props.pressRetentionOffset]\n  );\n\n  const hoverInTimeout = useRef<number | null>(null);\n  const hoverOutTimeout = useRef<number | null>(null);\n\n  const hoverGesture = useMemo(\n    () =>\n      Gesture.Hover()\n        .manualActivation(true) // Stops Hover from blocking Native gesture activation on web\n        .cancelsTouchesInView(false)\n        .onBegin((event) => {\n          if (hoverOutTimeout.current) {\n            clearTimeout(hoverOutTimeout.current);\n          }\n          if (props.delayHoverIn) {\n            hoverInTimeout.current = setTimeout(\n              () => props.onHoverIn?.(gestureToPressableEvent(event)),\n              props.delayHoverIn\n            );\n            return;\n          }\n          props.onHoverIn?.(gestureToPressableEvent(event));\n        })\n        .onFinalize((event) => {\n          if (hoverInTimeout.current) {\n            clearTimeout(hoverInTimeout.current);\n          }\n          if (props.delayHoverOut) {\n            hoverOutTimeout.current = setTimeout(\n              () => props.onHoverOut?.(gestureToPressableEvent(event)),\n              props.delayHoverOut\n            );\n            return;\n          }\n          props.onHoverOut?.(gestureToPressableEvent(event));\n        }),\n    [props]\n  );\n\n  const pressDelayTimeoutRef = useRef<number | null>(null);\n  const isTouchPropagationAllowed = useRef<boolean>(false);\n\n  // iOS only: due to varying flow of gestures, events sometimes have to be saved for later use\n  const deferredEventPayload = useRef<PressableEvent | null>(null);\n\n  const pressInHandler = useCallback(\n    (event: PressableEvent) => {\n      if (handlingOnTouchesDown.current) {\n        deferredEventPayload.current = event;\n      }\n\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      deferredEventPayload.current = null;\n\n      props.onPressIn?.(event);\n      isPressCallbackEnabled.current = true;\n      pressDelayTimeoutRef.current = null;\n      setPressedState(true);\n    },\n    [props]\n  );\n\n  const pressOutHandler = useCallback(\n    (event: PressableEvent) => {\n      if (\n        !hasPassedBoundsChecks.current ||\n        event.nativeEvent.touches.length >\n          event.nativeEvent.changedTouches.length\n      ) {\n        return;\n      }\n\n      if (props.unstable_pressDelay && pressDelayTimeoutRef.current !== null) {\n        // When delay is preemptively finished by lifting touches,\n        // we want to immediately activate it's effects - pressInHandler,\n        // even though we are located at the pressOutHandler\n        clearTimeout(pressDelayTimeoutRef.current);\n        pressInHandler(event);\n      }\n\n      if (deferredEventPayload.current) {\n        props.onPressIn?.(deferredEventPayload.current);\n        deferredEventPayload.current = null;\n      }\n\n      props.onPressOut?.(event);\n\n      if (isPressCallbackEnabled.current) {\n        props.onPress?.(event);\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n\n      isTouchPropagationAllowed.current = false;\n      hasPassedBoundsChecks.current = false;\n      isPressCallbackEnabled.current = true;\n      setPressedState(false);\n    },\n    [pressInHandler, props]\n  );\n\n  const handlingOnTouchesDown = useRef<boolean>(false);\n  const onEndHandlingTouchesDown = useRef<(() => void) | null>(null);\n  const cancelledMidPress = useRef<boolean>(false);\n\n  const activateLongPress = useCallback(\n    (event: GestureTouchEvent) => {\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      if (hasPassedBoundsChecks.current) {\n        props.onLongPress?.(gestureTouchToPressableEvent(event));\n        isPressCallbackEnabled.current = false;\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n    },\n    [props]\n  );\n\n  const longPressTimeoutRef = useRef<number | null>(null);\n  const longPressMinDuration =\n    (props.delayLongPress ?? DEFAULT_LONG_PRESS_DURATION) +\n    (props.unstable_pressDelay ?? 0);\n\n  const pressAndTouchGesture = useMemo(\n    () =>\n      Gesture.LongPress()\n        .minDuration(Number.MAX_SAFE_INTEGER) // Stops long press from blocking native gesture\n        .maxDistance(Number.MAX_SAFE_INTEGER) // Stops long press from cancelling after set distance\n        .cancelsTouchesInView(false)\n        .onTouchesDown((event) => {\n          handlingOnTouchesDown.current = true;\n          pressableRef.current?.measure((_x, _y, width, height) => {\n            if (\n              !isTouchWithinInset(\n                {\n                  width,\n                  height,\n                },\n                normalizedHitSlop,\n                event.changedTouches.at(-1)\n              ) ||\n              hasPassedBoundsChecks.current ||\n              cancelledMidPress.current\n            ) {\n              cancelledMidPress.current = false;\n              onEndHandlingTouchesDown.current = null;\n              handlingOnTouchesDown.current = false;\n              return;\n            }\n\n            hasPassedBoundsChecks.current = true;\n\n            // In case of multiple touches, the first one starts long press gesture\n            if (longPressTimeoutRef.current === null) {\n              // Start long press gesture timer\n              longPressTimeoutRef.current = setTimeout(\n                () => activateLongPress(event),\n                longPressMinDuration\n              );\n            }\n\n            if (props.unstable_pressDelay) {\n              pressDelayTimeoutRef.current = setTimeout(() => {\n                pressInHandler(gestureTouchToPressableEvent(event));\n              }, props.unstable_pressDelay);\n            } else {\n              pressInHandler(gestureTouchToPressableEvent(event));\n            }\n\n            onEndHandlingTouchesDown.current?.();\n            onEndHandlingTouchesDown.current = null;\n            handlingOnTouchesDown.current = false;\n          });\n        })\n        .onTouchesUp((event) => {\n          if (handlingOnTouchesDown.current) {\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n          // On iOS, short taps will make LongPress gesture call onTouchesUp before Native gesture calls onStart\n          // This variable ensures that onStart isn't detected as the first gesture since Pressable is pressed.\n          if (deferredEventPayload.current !== null) {\n            shouldPreventNativeEffects.current = true;\n          }\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        })\n        .onTouchesCancelled((event) => {\n          isPressCallbackEnabled.current = false;\n\n          if (handlingOnTouchesDown.current) {\n            cancelledMidPress.current = true;\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n\n          if (\n            !hasPassedBoundsChecks.current ||\n            event.allTouches.length > event.changedTouches.length\n          ) {\n            return;\n          }\n\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        }),\n    [\n      activateLongPress,\n      longPressMinDuration,\n      normalizedHitSlop,\n      pressInHandler,\n      pressOutHandler,\n      props.unstable_pressDelay,\n    ]\n  );\n\n  // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events\n  const buttonGesture = useMemo(\n    () =>\n      Gesture.Native()\n        .onBegin(() => {\n          // Android sets BEGAN state on press down\n          if (Platform.OS === 'android') {\n            isTouchPropagationAllowed.current = true;\n          }\n        })\n        .onStart(() => {\n          if (Platform.OS === 'web') {\n            isTouchPropagationAllowed.current = true;\n          }\n\n          // iOS sets ACTIVE state on press down\n          if (Platform.OS !== 'ios') {\n            return;\n          }\n\n          if (deferredEventPayload.current) {\n            isTouchPropagationAllowed.current = true;\n\n            if (hasPassedBoundsChecks.current) {\n              pressInHandler(deferredEventPayload.current);\n              deferredEventPayload.current = null;\n            } else {\n              pressOutHandler(deferredEventPayload.current);\n              isTouchPropagationAllowed.current = false;\n            }\n\n            return;\n          }\n\n          if (hasPassedBoundsChecks.current) {\n            isTouchPropagationAllowed.current = true;\n            return;\n          }\n\n          if (shouldPreventNativeEffects.current) {\n            shouldPreventNativeEffects.current = false;\n            return;\n          }\n\n          isTouchPropagationAllowed.current = true;\n        }),\n    [pressInHandler, pressOutHandler]\n  );\n\n  const appliedHitSlop = addInsets(\n    normalizedHitSlop,\n    normalizedPressRetentionOffset\n  );\n\n  const isPressableEnabled = props.disabled !== true;\n\n  const gestures = [pressAndTouchGesture, hoverGesture, buttonGesture];\n\n  for (const gesture of gestures) {\n    gesture.enabled(isPressableEnabled);\n    gesture.runOnJS(true);\n    gesture.hitSlop(appliedHitSlop);\n    gesture.shouldCancelWhenOutside(false);\n\n    if (Platform.OS !== 'web') {\n      gesture.shouldCancelWhenOutside(true);\n    }\n  }\n\n  // Uses different hitSlop, to activate on hitSlop area instead of pressRetentionOffset area\n  buttonGesture.hitSlop(normalizedHitSlop);\n\n  const gesture = Gesture.Simultaneous(...gestures);\n\n  const defaultRippleColor = props.android_ripple ? undefined : 'transparent';\n\n  // `cursor: 'pointer'` on `RNButton` crashes iOS\n  const pointerStyle: StyleProp<ViewStyle> =\n    Platform.OS === 'web' ? { cursor: 'pointer' } : {};\n\n  const styleProp =\n    typeof props.style === 'function'\n      ? props.style({ pressed: pressedState })\n      : props.style;\n\n  const childrenProp =\n    typeof props.children === 'function'\n      ? props.children({ pressed: pressedState })\n      : props.children;\n\n  const flattenedStyles = StyleSheet.flatten(styleProp ?? {});\n\n  const [innerStyles, outerStyles] = splitStyles(flattenedStyles);\n\n  return (\n    <View style={outerStyles}>\n      <GestureDetector gesture={gesture}>\n        <NativeButton\n          ref={pressableRef}\n          testID={props.testID}\n          hitSlop={appliedHitSlop}\n          enabled={isPressableEnabled}\n          touchSoundDisabled={props.android_disableSound ?? undefined}\n          rippleColor={processColor(\n            props.android_ripple?.color ?? defaultRippleColor\n          )}\n          rippleRadius={props.android_ripple?.radius ?? undefined}\n          style={[StyleSheet.absoluteFill, pointerStyle, innerStyles]}>\n          {childrenProp}\n          {__DEV__ ? (\n            <PressabilityDebugView color=\"red\" hitSlop={normalizedHitSlop} />\n          ) : null}\n        </NativeButton>\n      </GestureDetector>\n    </View>\n  );\n}\n"]}